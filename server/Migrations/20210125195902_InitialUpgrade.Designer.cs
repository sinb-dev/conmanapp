// <auto-generated />
using System;
using Conman;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace server.Migrations
{
    [DbContext(typeof(ConmanContext))]
    [Migration("20210125195902_InitialUpgrade")]
    partial class InitialUpgrade
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Conman.Models.Container", b =>
                {
                    b.Property<int>("Port")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.None);

                    b.Property<string>("Command")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Port");

                    b.HasIndex("TokenId");

                    b.ToTable("Containers");
                });

            modelBuilder.Entity("Conman.Models.Reservation", b =>
                {
                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<string>("ApprovedByTokenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("ContainerPort")
                        .HasColumnType("smallint");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Reserved")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReservedForTokenId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Port");

                    b.HasIndex("ApprovedByTokenId");

                    b.HasIndex("ReservedForTokenId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Conman.Models.Token", b =>
                {
                    b.Property<string>("TokenId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Class")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUse")
                        .HasColumnType("datetime2");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TokenId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Conman.Models.Container", b =>
                {
                    b.HasOne("Conman.Models.Token", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId");

                    b.Navigation("Token");
                });

            modelBuilder.Entity("Conman.Models.Reservation", b =>
                {
                    b.HasOne("Conman.Models.Token", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedByTokenId");

                    b.HasOne("Conman.Models.Token", "ReservedFor")
                        .WithMany()
                        .HasForeignKey("ReservedForTokenId");

                    b.Navigation("ApprovedBy");

                    b.Navigation("ReservedFor");
                });
#pragma warning restore 612, 618
        }
    }
}
